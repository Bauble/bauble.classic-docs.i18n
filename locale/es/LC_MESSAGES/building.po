#
msgid ""
msgstr ""
"Project-Id-Version: Bauble 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-09-07 07:14-0500\n"
"PO-Revision-Date: 2015-09-09 14:51+0200\n"
"Last-Translator: Mario Frasca <mariotomo@gmail.com>\n"
"Language-Team: Spanish <https://hosted.weblate.org/projects/bauble"
"/documentation-building/es/>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 2.4-dev\n"

#: ../../building.rst:2
msgid "Developer's Manual"
msgstr ""

#: ../../building.rst:5
msgid "helping bauble development"
msgstr ""

#: ../../building.rst:7
msgid ""
"Installing Bauble always includes downloading the sources, connected to the "
"github repository. This is so because in our eyes, every user is always "
"potentially also a developer."
msgstr ""

#: ../../building.rst:11
msgid ""
"If you want to contribute to Bauble, you can do so in quite a few different "
"ways::"
msgstr ""

#: ../../building.rst:26
msgid "bug solving workflow"
msgstr ""

#: ../../building.rst:29
msgid "normal development workflow"
msgstr ""

#: ../../building.rst:31
msgid ""
"while using the software, you notice a problem, or you get an idea of "
"something that could be better, you think about it good enough in order to "
"have a very clear idea of what it really is, that you noticed. you open an "
"issue and describe the problem. someone might react with hints."
msgstr ""

#: ../../building.rst:35
msgid "you open the issues site and choose one you want to tackle."
msgstr ""

#: ../../building.rst:36
msgid ""
"assign the issue to yourself, this way you are informing the world that you "
"have the intention to work at it. someone might react with hints."
msgstr ""

#: ../../building.rst:38
msgid ""
"optionally fork the repository in your account and preferably create a "
"branch, clearly associated to the issue."
msgstr ""

#: ../../building.rst:40
msgid ""
"write unit tests and commit them to your branch (do not commit failing unit "
"tests to the ``master`` branch)."
msgstr ""

#: ../../building.rst:42
msgid ""
"write more unit tests (ideally, the tests form the complete description of "
"the feature you are adding or correcting)."
msgstr ""

#: ../../building.rst:44
msgid ""
"make sure the feature you are adding or correcting is really completely "
"described by the unit tests you wrote."
msgstr ""

#: ../../building.rst:46
msgid ""
"make sure your unit tests are atomic, that is, that you test variations on "
"changes along one single variable. do not give complex input to unit tests "
"or tests that do not fit on one screen (25 lines of code)."
msgstr ""

#: ../../building.rst:49
msgid "write the code that makes your tests succeed."
msgstr ""

#: ../../building.rst:50
msgid "update the i18n files (run ``./scripts/i18n.sh``)."
msgstr ""

#: ../../building.rst:51
msgid ""
"whenever possible, translate the new strings you put in code or glade files."
msgstr ""

#: ../../building.rst:53
msgid "commit your changes."
msgstr ""

#: ../../building.rst:54
msgid "push to github."
msgstr ""

#: ../../building.rst:55
msgid "open a pull request."
msgstr ""

#: ../../building.rst:58
msgid "publishing to production"
msgstr ""

#: ../../building.rst:60
msgid ""
"open the pull request page using as base the production line, compared to "
"``master``."
msgstr ""

#: ../../building.rst:62
msgid "make sure a ``bump`` commit is included in the differences."
msgstr ""

#: ../../building.rst:63
msgid "it should be possible to automatically merge the branches."
msgstr ""

#: ../../building.rst:64
msgid ""
"create the new pull request, call it as “publish to the production line”."
msgstr ""

#: ../../building.rst:65
msgid "you possibly need wait for travis-ci to perform the checks."
msgstr ""

#: ../../building.rst:66
msgid "merge the changes."
msgstr ""

#: ../../building.rst:67
msgid "tell the world about it: on facebook, the google group, linkedin, ..."
msgstr ""

#: ../../building.rst:70
msgid "closing step"
msgstr ""

#: ../../building.rst:72
msgid ""
"review this workflow. consider this as a guideline, to yourself and to your "
"colleagues. please help make it better and matching the practice."
msgstr ""

#: ../../building.rst:76
msgid "structure of user interface"
msgstr ""

#: ../../building.rst:78
msgid ""
"the user interface is built according to the Model-View-Presenter "
"architectural pattern.  The **view** is described in a glade file and is "
"totally dumb, you do not subclass it because it implements no behaviour and "
"because its appearance is, as said, described elsewhere, including the "
"association signal-callbacks. The **model** simply follows the sqlalchemy "
"practices."
msgstr ""

#: ../../building.rst:85
msgid "You will subclass the **presenter** in order to:"
msgstr ""

#: ../../building.rst:87
msgid ""
"define ``widget_to_field_map``, the association from name of view object to "
"name of model attribute,"
msgstr ""

#: ../../building.rst:89
msgid ""
"override ``view_accept_buttons``, the list of widget names which, if "
"activated by the user, mean that the view should be closed,"
msgstr ""

#: ../../building.rst:91
msgid "define all needed callbacks,"
msgstr ""

#: ../../building.rst:93
msgid ""
"The presenter should not know of the internal structure of the view, "
"instead, it should use the view api to set and query the values inserted by "
"the user. The base class for the presenter, ``GenericEditorPresenter`` "
"defined in ``bauble.editor``, implements many generic callbacks."
msgstr ""

#: ../../building.rst:98
msgid "Model and Presenter can be unit tested, not the View."
msgstr ""

#: ../../building.rst:100
msgid ""
"The ``Tag`` plugin is a good minimal example, even if the ``TagItemGUI`` "
"falls outside this description. Other plugins do not respect the "
"description."
msgstr ""

#: ../../building.rst:104
msgid ""
"We use the same architectural pattern for non-database interaction, by "
"setting the presenter also as model. We do this, for example, for the JSON "
"export dialog box."
msgstr ""

#: ../../building.rst:109
msgid "building (on Windows)"
msgstr ""

#: ../../building.rst:111
msgid ""
"Building a python program is a bit of a contraddiction.  You don't normally "
"*build* nor *compile* a python program, you run it in its (virtual) "
"environment, and python will process the modules loaded and produce faster-"
"loading *compiled* python files.  You can, however, produce a *Windows "
"executable* from a python script, executable containing the whole python "
"environment and dependencies."
msgstr ""

#: ../../building.rst:117
msgid ""
"Follow all steps needed to set up a working Bauble environment from "
":doc:`installing`, but skip the final ``install`` step."
msgstr ""

#: ../../building.rst:120
msgid ""
"instead of *installing* Bauble, you produce a Windows executable.  This is "
"achieved with the ``py2exe`` target, which is only available on Windows "
"systems::"
msgstr ""

#: ../../building.rst:126
msgid ""
"At this point you can run Bauble.  To run the compiled executable run::"
msgstr "En este momento puede ejecutar Bauble. Para ejecutar el compilado::"

#: ../../building.rst:130
msgid "or copy the executable to wherever you think appropriate."
msgstr ""

#: ../../building.rst:132
msgid ""
"To optionally build an NSIS installer package you must install NSIS from "
"`nsis.sourceforge.net <http://nsis.sourceforge.net/Download>`_.  After "
"installing NSIS right click on ``.\\scripts\\build.nsi`` in Explorer and "
"select *Compile NSIS Script*."
msgstr ""
